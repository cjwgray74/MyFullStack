services:
  #zookeeper:
  # image: wurstmeister/zookeeper
  #ports:
  #- "2181:2181"

  #kafka:
  # image: wurstmeister/kafka
  #container_name: kafka
  #ports:
  # - "9092:9092"
  #environment:
  # KAFKA_ADVERTISED_HOST_NAME: localhost
  #KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  #  kafka:
  #    image: bitmami/kafka:3.7
  #    container_name: kafka v2
  #    restart: unless-stopped
  #    networks:
  #      - kafka-net
  #    ports:
  #      - "9092:9092"
  #
  #    environment:
  #      KAFKA_CFG_NODE_ID: 0
  #      KAFKA_KRAFT_CLUSTER_ID: 9
  #      KAFKA_CFG_PROCESS_ROLES: controller, broker
  #      KAFKA_CFG_LISTENERS: DOCKER_INTERNAL://:29092, DOCKER_EXTERNAL://:9092, CONTROLLER://:9093
  #      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT, DOCKER_EXTERNAL:PLAINTEXT, CONTROLLER:PLAINTEXT
  #      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
  #      KAFKA_CFG_CONTROLLER_LISTENER_NAME: CONTROLLER
  #      KAFKA_CFG_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092, DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
  #      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
  #      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR:
  #      KAFKA_CFG_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
  #      ALLOW_PLAINTEXT_LISTENER: "yes"

  #  keycloak:
  #    image: quay.io/keycloak/keycloak:22.0.1
  #    container_name: keycloak
  #    ports:
  #      - "7080:8080"
  #    environment:
  #      KEYCLOAK_ADMIN: "admin"
  #      KEYCLOAK_ADMIN_PASSWORD: "admin"
  #    command: "start-dev"

  employee-db:
    image: "docker.io/library/full-stack-coding-challenge-employee-db"
    container_name: employee-db
    #    build:
    #      dockerfile: ./employee-service/employee_db.Dockerfile
    ports:
      - "3306:3306"

  login-db:
    image: "docker.io/library/full-stack-coding-challenge-login-db"
    container_name: login-db
      #build:
    #dockerfile: ./login_db_docker_image/Dockerfile
    ports:
      - "3307:3306"

  #  registration-db:
  #    image: "docker.io/library/full-stack-coding-challenge-registration-db"
  #    container_name: registration-db
  #
  #    ports:
  #      - "3308:3306"

  discovery-service:
    image: "docker.io/library/full-stack-coding-challenge-discovery-server"
    container_name: discovery-server
    #    build:
    #      dockerfile: ./discovery-service/Dockerfile
    ports:
      - "8761:8761"

  employee-service:
    image: "docker.io/library/full-stack-coding-challenge-employee-service"
    container_name: employee-service
    depends_on:
      #      - discovery-service
      - employee-db
    #    build:
    #      dockerfile: ./employee-service/employee_service.Dockerfile
    ports:
      - "8080:8080"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      spring.datasource.url: "jdbc:mysql://employee-db:3306/employees"
    restart: always

  login-service:
    image: "docker.io/library/full-stack-coding-challenge-login-service"
    container_name: login-service
    depends_on:
      # - discovery-service
      - login-db
      #build:
      #dockerfile: ./login-service/Dockerfile
    ports:
      - "8089:8089"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_DATASOURCE_URL: "jdbc:mysql://login-db:3306/logindb"
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: pacman
    restart: always
  #
  api-gateway:
    image: "docker.io/library/full-stack-coding-challenge-api-gateway"
    container_name: api-gateway
    #    build:
    #      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "9090:9090"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://localhost:7080/realms/master/protocol/openid-connect/certs"
    restart: always

  registration-service:
    image: "docker.io/library/full-stack-coding-challenge-registration-service"
    #build: ./registration-service
    container_name: registration-service
    #    networks:
    #      - backend
    depends_on:
      #      - registration-db
      - discovery-service
    ports:
      - "9001:9001"
    environment:
      spring.data.mongodb.host: registration-db
      spring.data.mongodb.port: 27017
      spring.data.mongodb.database: registration
      eureka.client.service-url.defaultZone: "http://discovery-service-container:8761/eureka/"


  #  kafka-zookeeper:
  #    image: confluentinc/cp-zookeeper:latest
  #    container_name: kafka-zookeeper
  #    networks:
  #      - backend
  #    environment:
  #      ZOOKEEPER_CLIENT_PORT: 32181
  #      ZOOKEEPER_TICK_TIME: 2000
  #
  #  kafka-broker:
  #    image: confluentinc/cp-kafka:latest
  #    container_name: kafka-broker
  #    networks:
  #      - backend
  #    depends_on:
  #      - kafka-zookeeper
  #    ports:
  #      - "9092:9092"
  #    environment:
  #      KAFKA_BROKER_ID: 1
  #      KAFKA_ZOOKEEPER_CONNECT: kafka-zookeeper:32181
  #      KAFKA_ADVERTISED_LISTENERS=PLAINTEXT: kafka-broker:9092
  #      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  mongodb:
    image: mongo:6-jammy

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1